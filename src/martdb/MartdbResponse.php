<?php
namespace martdb;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MartdbResponse
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'sender',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'time',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'request_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'code',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'msg',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'result',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $id = null;
    /**
     * @var string
     */
    public $sender = null;
    /**
     * @var int
     */
    public $time = null;
    /**
     * @var string
     */
    public $request_id = null;
    /**
     * @var string
     */
    public $code = null;
    /**
     * @var string
     */
    public $msg = null;
    /**
     * @var string
     */
    public $result = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['sender'])) {
                $this->sender = $vals['sender'];
            }
            if (isset($vals['time'])) {
                $this->time = $vals['time'];
            }
            if (isset($vals['request_id'])) {
                $this->request_id = $vals['request_id'];
            }
            if (isset($vals['code'])) {
                $this->code = $vals['code'];
            }
            if (isset($vals['msg'])) {
                $this->msg = $vals['msg'];
            }
            if (isset($vals['result'])) {
                $this->result = $vals['result'];
            }
        }
    }

    public function getName()
    {
        return 'MartdbResponse';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->sender);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->request_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->code);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->msg);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->result);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MartdbResponse');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sender !== null) {
            $xfer += $output->writeFieldBegin('sender', TType::STRING, 2);
            $xfer += $output->writeString($this->sender);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->time !== null) {
            $xfer += $output->writeFieldBegin('time', TType::I64, 3);
            $xfer += $output->writeI64($this->time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->request_id !== null) {
            $xfer += $output->writeFieldBegin('request_id', TType::STRING, 4);
            $xfer += $output->writeString($this->request_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->code !== null) {
            $xfer += $output->writeFieldBegin('code', TType::STRING, 5);
            $xfer += $output->writeString($this->code);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->msg !== null) {
            $xfer += $output->writeFieldBegin('msg', TType::STRING, 6);
            $xfer += $output->writeString($this->msg);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->result !== null) {
            $xfer += $output->writeFieldBegin('result', TType::STRING, 7);
            $xfer += $output->writeString($this->result);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
